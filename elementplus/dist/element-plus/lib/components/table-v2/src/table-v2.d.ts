declare const TableV2: import("vue").DefineComponent<{
    readonly cache: import("../../../utils").BuildPropReturn<NumberConstructor, 2, false, never, never>;
    readonly estimatedRowHeight: {
        readonly default: undefined;
        readonly type: import("vue").PropType<number>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        readonly __elPropsReservedKey: true;
    };
    readonly rowKey: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<import("./types").KeyType>, "id", unknown, unknown, unknown>;
    readonly cellProps: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<any>, unknown, unknown, unknown, unknown>;
    readonly headerClass: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<string | import("./table").HeaderClassNameGetter<any>>, unknown, unknown, unknown, unknown>;
    readonly headerProps: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<any>, unknown, unknown, unknown, unknown>;
    readonly headerCellProps: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<any>, unknown, unknown, unknown, unknown>;
    readonly headerHeight: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<number | number[]>, 50, unknown, unknown, unknown>;
    readonly footerHeight: import("../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
    readonly rowClass: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<string | import("./table").RowClassNameGetter<any>>, unknown, unknown, unknown, unknown>;
    readonly rowProps: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<any>, unknown, unknown, unknown, unknown>;
    readonly rowHeight: import("../../../utils").BuildPropReturn<NumberConstructor, 50, unknown, unknown, unknown>;
    readonly columns: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<import("./common").AnyColumn[]>, unknown, true, unknown, unknown>;
    readonly data: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<any[]>, unknown, true, unknown, unknown>;
    readonly dataGetter: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<import("./types").DataGetter<any>>, unknown, unknown, unknown, unknown>;
    readonly dataKey: import("../../../utils").BuildPropReturn<StringConstructor, "id", unknown, unknown, unknown>;
    readonly fixedData: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<any[]>, unknown, unknown, unknown, unknown>;
    readonly expandColumnKey: StringConstructor;
    readonly expandedRowKeys: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<import("./types").KeyType[]>, () => never[], unknown, unknown, unknown>;
    readonly defaultExpandedRowKeys: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<import("./types").KeyType[]>, () => never[], unknown, unknown, unknown>;
    readonly class: StringConstructor;
    readonly disabled: BooleanConstructor;
    readonly fixed: BooleanConstructor;
    readonly style: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<import("vue").CSSProperties>, unknown, unknown, unknown, unknown>;
    readonly width: import("../../../utils").BuildPropReturn<NumberConstructor, unknown, true, unknown, unknown>;
    readonly height: import("../../../utils").BuildPropReturn<NumberConstructor, unknown, true, unknown, unknown>;
    readonly maxHeight: NumberConstructor;
    readonly useIsScrolling: BooleanConstructor;
    readonly indentSize: import("../../../utils").BuildPropReturn<NumberConstructor, 12, unknown, unknown, unknown>;
    readonly iconSize: import("../../../utils").BuildPropReturn<NumberConstructor, 12, unknown, unknown, unknown>;
    readonly hScrollbarSize: import("../../../utils").BuildPropReturn<NumberConstructor, 6, unknown, unknown, unknown>;
    readonly vScrollbarSize: import("../../../utils").BuildPropReturn<NumberConstructor, 6, unknown, unknown, unknown>;
    readonly scrollbarAlwaysOn: BooleanConstructor;
    readonly sortBy: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<import("./types").SortBy>, () => {
        key: import("./types").KeyType;
        order: import("./constants").SortOrder;
    }, unknown, unknown, unknown>;
    readonly sortState: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<Record<import("./types").KeyType, import("./constants").SortOrder>>, undefined, unknown, unknown, unknown>;
    readonly onColumnSort: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<import("./table").ColumnSortHandler<any>>, unknown, unknown, unknown, unknown>;
    readonly onExpandedRowsChange: FunctionConstructor;
    readonly onEndReached: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<(distance: number) => void>, unknown, unknown, unknown, unknown>;
    readonly onRowExpand: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<import("./row").RowExpandHandler<any>>, unknown, unknown, unknown, unknown>;
    readonly onScroll: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<(...args: any[]) => void>, unknown, unknown, unknown, unknown>;
    readonly onRowRendered: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<(params: import("./grid").onRowRenderedParams) => void>, unknown, unknown, unknown, unknown>;
    readonly rowEventHandlers: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<import("./row").RowEventHandlers<any>>, unknown, unknown, unknown, unknown>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    readonly cache: import("../../../utils").BuildPropReturn<NumberConstructor, 2, false, never, never>;
    readonly estimatedRowHeight: {
        readonly default: undefined;
        readonly type: import("vue").PropType<number>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        readonly __elPropsReservedKey: true;
    };
    readonly rowKey: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<import("./types").KeyType>, "id", unknown, unknown, unknown>;
    readonly cellProps: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<any>, unknown, unknown, unknown, unknown>;
    readonly headerClass: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<string | import("./table").HeaderClassNameGetter<any>>, unknown, unknown, unknown, unknown>;
    readonly headerProps: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<any>, unknown, unknown, unknown, unknown>;
    readonly headerCellProps: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<any>, unknown, unknown, unknown, unknown>;
    readonly headerHeight: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<number | number[]>, 50, unknown, unknown, unknown>;
    readonly footerHeight: import("../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
    readonly rowClass: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<string | import("./table").RowClassNameGetter<any>>, unknown, unknown, unknown, unknown>;
    readonly rowProps: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<any>, unknown, unknown, unknown, unknown>;
    readonly rowHeight: import("../../../utils").BuildPropReturn<NumberConstructor, 50, unknown, unknown, unknown>;
    readonly columns: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<import("./common").AnyColumn[]>, unknown, true, unknown, unknown>;
    readonly data: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<any[]>, unknown, true, unknown, unknown>;
    readonly dataGetter: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<import("./types").DataGetter<any>>, unknown, unknown, unknown, unknown>;
    readonly dataKey: import("../../../utils").BuildPropReturn<StringConstructor, "id", unknown, unknown, unknown>;
    readonly fixedData: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<any[]>, unknown, unknown, unknown, unknown>;
    readonly expandColumnKey: StringConstructor;
    readonly expandedRowKeys: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<import("./types").KeyType[]>, () => never[], unknown, unknown, unknown>;
    readonly defaultExpandedRowKeys: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<import("./types").KeyType[]>, () => never[], unknown, unknown, unknown>;
    readonly class: StringConstructor;
    readonly disabled: BooleanConstructor;
    readonly fixed: BooleanConstructor;
    readonly style: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<import("vue").CSSProperties>, unknown, unknown, unknown, unknown>;
    readonly width: import("../../../utils").BuildPropReturn<NumberConstructor, unknown, true, unknown, unknown>;
    readonly height: import("../../../utils").BuildPropReturn<NumberConstructor, unknown, true, unknown, unknown>;
    readonly maxHeight: NumberConstructor;
    readonly useIsScrolling: BooleanConstructor;
    readonly indentSize: import("../../../utils").BuildPropReturn<NumberConstructor, 12, unknown, unknown, unknown>;
    readonly iconSize: import("../../../utils").BuildPropReturn<NumberConstructor, 12, unknown, unknown, unknown>;
    readonly hScrollbarSize: import("../../../utils").BuildPropReturn<NumberConstructor, 6, unknown, unknown, unknown>;
    readonly vScrollbarSize: import("../../../utils").BuildPropReturn<NumberConstructor, 6, unknown, unknown, unknown>;
    readonly scrollbarAlwaysOn: BooleanConstructor;
    readonly sortBy: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<import("./types").SortBy>, () => {
        key: import("./types").KeyType;
        order: import("./constants").SortOrder;
    }, unknown, unknown, unknown>;
    readonly sortState: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<Record<import("./types").KeyType, import("./constants").SortOrder>>, undefined, unknown, unknown, unknown>;
    readonly onColumnSort: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<import("./table").ColumnSortHandler<any>>, unknown, unknown, unknown, unknown>;
    readonly onExpandedRowsChange: FunctionConstructor;
    readonly onEndReached: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<(distance: number) => void>, unknown, unknown, unknown, unknown>;
    readonly onRowExpand: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<import("./row").RowExpandHandler<any>>, unknown, unknown, unknown, unknown>;
    readonly onScroll: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<(...args: any[]) => void>, unknown, unknown, unknown, unknown>;
    readonly onRowRendered: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<(params: import("./grid").onRowRenderedParams) => void>, unknown, unknown, unknown, unknown>;
    readonly rowEventHandlers: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<import("./row").RowEventHandlers<any>>, unknown, unknown, unknown, unknown>;
}>>, {
    disabled: boolean;
    fixed: boolean;
    onScroll: (...args: any[]) => void;
    style: import("vue").CSSProperties;
    scrollbarAlwaysOn: boolean;
    rowKey: import("../../../utils").BuildPropType<import("../../../utils").PropWrapper<import("./types").KeyType>, unknown, unknown>;
    sortBy: import("./types").SortBy;
    useIsScrolling: boolean;
    cache: number;
    headerClass: import("../../../utils").BuildPropType<import("../../../utils").PropWrapper<string | import("./table").HeaderClassNameGetter<any>>, unknown, unknown>;
    estimatedRowHeight: number;
    rowHeight: number;
    hScrollbarSize: number;
    vScrollbarSize: number;
    onRowExpand: import("./row").RowExpandHandler<any>;
    rowEventHandlers: import("./row").RowEventHandlers<any>;
    headerHeight: import("../../../utils").BuildPropType<import("../../../utils").PropWrapper<number | number[]>, unknown, unknown>;
    fixedData: any[];
    cellProps: any;
    headerProps: any;
    headerCellProps: any;
    footerHeight: number;
    rowClass: import("../../../utils").BuildPropType<import("../../../utils").PropWrapper<string | import("./table").RowClassNameGetter<any>>, unknown, unknown>;
    rowProps: any;
    dataGetter: import("./types").DataGetter<any>;
    dataKey: string;
    indentSize: number;
    iconSize: number;
    sortState: Record<import("./types").KeyType, import("./constants").SortOrder>;
    onColumnSort: import("./table").ColumnSortHandler<any>;
    onEndReached: (distance: number) => void;
    expandedRowKeys: import("./types").KeyType[];
    defaultExpandedRowKeys: import("./types").KeyType[];
    onRowRendered: (params: import("./grid").onRowRenderedParams) => void;
}>;
export default TableV2;
export declare type TableV2Instance = InstanceType<typeof TableV2>;
